"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KoreanPostpositionProcessor = exports.default_modifiers = exports.default_testers = void 0;
var consts_1 = require("./consts");
var hangul_1 = __importDefault(require("./testers/hangul"));
var number_1 = __importDefault(require("./testers/number"));
var kana_1 = __importDefault(require("./testers/kana"));
var parenthesis_1 = __importDefault(require("./modifiers/parenthesis"));
exports.default_testers = [
    hangul_1.default,
    number_1.default,
    kana_1.default,
];
exports.default_modifiers = [
    parenthesis_1.default,
];
var KoreanPostpositionProcessor = /** @class */ (function () {
    function KoreanPostpositionProcessor(option) {
        var modifiers = exports.default_modifiers;
        var testers = exports.default_testers;
        if (option !== undefined) {
            if (option.modifiers) {
                modifiers = option.modifiers;
            }
            if (option.testers) {
                testers = option.testers;
            }
        }
        this.modifiers = __spreadArrays(modifiers);
        this.testers = __spreadArrays(testers);
    }
    Object.defineProperty(KoreanPostpositionProcessor.prototype, "name", {
        get: function () {
            return "korean-postposition";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KoreanPostpositionProcessor.prototype, "type", {
        get: function () {
            return "postProcessor";
        },
        enumerable: false,
        configurable: true
    });
    KoreanPostpositionProcessor.prototype.process = function (value /*, key: string, options: any*/) {
        var regex = /\[\[(?:을|를|이|가|은|는|(?:으로)|로|과|와|(?:이랑)|랑)\]\]/g;
        var lastIndex = 0;
        var ret = [];
        do {
            var matches = regex.exec(value);
            if (matches === null) {
                break;
            }
            var prevPart = value.substring(lastIndex, matches.index);
            ret.push(prevPart);
            var postPosition = matches[0].replace("[[", "").replace("]]", "");
            // default value - template input
            var existFinal = this.runTests(prevPart, postPosition);
            ret.push(consts_1.PostPositionMap[postPosition][existFinal ? 0 : 1]);
            lastIndex = matches.index + matches[0].length;
        } while (true);
        if (lastIndex !== value.length) {
            ret.push(value.substring(lastIndex));
        }
        return ret.join("");
    };
    KoreanPostpositionProcessor.prototype.runTests = function (prevPart, postPosition) {
        prevPart = this.applyModifiers(prevPart);
        var existFinal = consts_1.PostPositionMap[postPosition].indexOf(postPosition) === 0;
        for (var _i = 0, _a = this.testers; _i < _a.length; _i++) {
            var test_1 = _a[_i];
            var testResult = test_1(prevPart);
            if (testResult === undefined) {
                continue;
            }
            else {
                if (testResult !== null) {
                    existFinal = testResult;
                }
                break;
            }
        }
        return existFinal;
    };
    KoreanPostpositionProcessor.prototype.applyModifiers = function (prevPart) {
        for (var _i = 0, _a = this.modifiers; _i < _a.length; _i++) {
            var modifier = _a[_i];
            prevPart = modifier(prevPart);
        }
        return prevPart;
    };
    return KoreanPostpositionProcessor;
}());
exports.KoreanPostpositionProcessor = KoreanPostpositionProcessor;
var defaultInstance = new KoreanPostpositionProcessor();
exports.default = defaultInstance;
//# sourceMappingURL=index.js.map