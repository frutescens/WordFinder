import "./chunk-5WRI5ZAA.js";

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/utils/StorageMethods.js
var GetStoreKey = function(key, prefix) {
  if (prefix && prefix !== "") {
    return `${prefix}.${key}`;
  } else {
    return key;
  }
};
var GetDataKey = function(key, prefix) {
  if (prefix && prefix !== "") {
    return key.substring(prefix.length + 1);
  } else {
    return key;
  }
};
var SetItem = function(dataKey, prefix, value) {
  value = JSON.stringify([value]);
  localStorage.setItem(GetStoreKey(dataKey, prefix), value);
};
var GetItem = function(dataKey, prefix) {
  var value = localStorage.getItem(GetStoreKey(dataKey, prefix));
  if (value == null) {
    return void 0;
  } else {
    value = JSON.parse(value)[0];
    return value;
  }
};
var RemoveItem = function(dataKey, prefix) {
  localStorage.removeItem(GetStoreKey(dataKey, prefix));
  return this;
};

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/StorageMethods.js
var StorageMethods_default = {
  getStoreKey(dataKey) {
    return GetStoreKey(dataKey, this.name);
  },
  getDataKey(storeKey) {
    return GetDataKey(storeKey, this.name);
  },
  setItem(dataKey, value) {
    SetItem(dataKey, this.name, value);
    return this;
  },
  getItem(dataKey) {
    return GetItem(dataKey, this.name);
  },
  removeItem(dataKey) {
    RemoveItem(dataKey, this.name);
    return this;
  }
};

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/Load.js
var LoadDataKeys = function() {
  this.dataKeys.clear();
  var keys = this.getItem("__keys__");
  if (keys) {
    for (var i = 0, cnt = keys.length; i < cnt; i++) {
      this.dataKeys.set(keys[i]);
    }
  }
  return this;
};
var Load = function(defaultData, reset) {
  if (defaultData === void 0) {
    reset = false;
  }
  LoadDataKeys.call(this);
  this.defaultData = defaultData;
  this._syncEnable = false;
  this.reset();
  if (!reset) {
    this.dataKeys.iterate(function(dataKey2, index) {
      this.set(dataKey2, this.getItem(dataKey2));
    }, this);
  }
  this._syncEnable = true;
  if (defaultData) {
    var value, prevValue;
    for (var dataKey in defaultData) {
      prevValue = reset ? void 0 : this.getItem(dataKey);
      value = prevValue === void 0 ? defaultData[dataKey] : prevValue;
      this.set(dataKey, value);
    }
    this.setItem("__keys__", this.dataKeys.entries);
  }
  return this;
};
var Load_default = Load;

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/GetDefaultValue.js
var GetDefaultValue = function(key) {
  return this.defaultData ? this.defaultData[key] : void 0;
};
var GetDefaultValue_default = GetDefaultValue;

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/AddCallbacks.js
var AddCallbacks = function(dataManager) {
  dataManager.events.on("changedata", function(parent, key, value, previousValue) {
    if (!this._syncEnable) {
      return;
    }
    if (typeof value !== "object" && value === previousValue) {
      return;
    }
    this.setItem(key, value);
    if (!this.dataKeys.contains(key)) {
      this.dataKeys.set(key);
      this.setItem("__keys__", this.dataKeys.entries);
    }
  }, dataManager).on("setdata", function(parent, key, value) {
    if (!this._syncEnable) {
      return;
    }
    this.setItem(key, value);
    this.dataKeys.set(key);
    this.setItem("__keys__", this.dataKeys.entries);
  }, dataManager).on("removedata", function(parent, key, value) {
    if (!this._syncEnable) {
      return;
    }
    this.removeItem(key);
    this.dataKeys.delete(key);
    this.setItem("__keys__", this.dataKeys.entries);
  }, dataManager);
};
var AddCallbacks_default = AddCallbacks;

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/Extend.js
var GetValue = Phaser.Utils.Objects.GetValue;
var SetStruct = Phaser.Structs.Set;
var methods = {
  load: Load_default,
  getDefaultValue: GetDefaultValue_default
};
var Extend = function(dataManager, config) {
  if (dataManager.hasOwnProperty("_syncEnable")) {
    return dataManager;
  }
  dataManager._syncEnable = true;
  dataManager.dataKeys = new SetStruct();
  dataManager.defaultData = void 0;
  Object.assign(
    dataManager,
    StorageMethods_default,
    methods
  );
  AddCallbacks_default(dataManager);
  dataManager.name = GetValue(config, "name", "");
  var load = GetValue(config, "load", true);
  if (load) {
    var defaultData = GetValue(config, "default", void 0);
    var resetFlag = GetValue(config, "reset", false);
    dataManager.load(defaultData, resetFlag);
  }
  return dataManager;
};
var Extend_default = Extend;

// node_modules/phaser3-rex-plugins/plugins/storage/localstorage/data/DataManager.js
var Base = Phaser.Data.DataManager;
var EventEmitterClass = Phaser.Events.EventEmitter;
var IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var DataManager = class extends Base {
  constructor(parent, eventEmitter, config) {
    if (IsPlainObject(parent)) {
      config = parent;
      parent = void 0;
      eventEmitter = void 0;
    } else if (IsPlainObject(eventEmitter)) {
      config = eventEmitter;
      eventEmitter = void 0;
    }
    var useDefaultEventEmitter = eventEmitter === void 0;
    if (useDefaultEventEmitter) {
      eventEmitter = new EventEmitterClass();
    }
    if (parent === void 0) {
      parent = eventEmitter;
    }
    super(parent, eventEmitter);
    if (useDefaultEventEmitter) {
      var parentEventEmitter = parent.events ? parent.events : parent;
      if (parentEventEmitter) {
        parentEventEmitter.once("destroy", this.destroy, this);
      }
    }
    Extend_default(this, config);
  }
};
var DataManager_default = DataManager;

// node_modules/phaser3-rex-plugins/plugins/localstorage-data.js
var localstorage_data_default = DataManager_default;

// node_modules/phaser3-rex-plugins/plugins/localstorage-data-plugin.js
var DataManagerPlugin = class extends Phaser.Plugins.BasePlugin {
  constructor(pluginManager) {
    super(pluginManager);
  }
  start() {
    var eventEmitter = this.game.events;
    eventEmitter.on("destroy", this.destroy, this);
  }
  add(parent, eventEmitter, config) {
    return new localstorage_data_default(parent, eventEmitter, config);
  }
  extend(dataManager, config) {
    return Extend_default(dataManager, config);
  }
  setItem(dataKey, name, value) {
    SetItem(dataKey, name, value);
    return this;
  }
  getItem(dataKey, name) {
    return GetItem(dataKey, name);
  }
  removeItem(dataKey, name) {
    RemoveItem(dataKey, name);
    return this;
  }
};
var localstorage_data_plugin_default = DataManagerPlugin;
export {
  localstorage_data_plugin_default as default
};
//# sourceMappingURL=phaser3-rex-plugins_plugins_localstorage-data-plugin.js.map
